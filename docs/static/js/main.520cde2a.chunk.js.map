{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GridGifItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","className","id","type","aria-label","aria-describedby","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GridGifItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","Categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAsB9C,OAEI,0BAAMC,SAjBW,SAACC,GAElBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAO,IAEzBR,GAAe,SAACS,GAAD,OAAkBP,GAAlB,mBAAiCO,OAChDN,EAAc,OAUd,yBAAKO,UAAU,yBACX,yBAAKA,UAAU,uBACX,0BACIA,UAAU,mBACVC,GAAG,gBAFP,kBAMJ,2BACIC,KAAK,OACLF,UAAU,eACVG,aAAW,SACXC,mBAAiB,eACjBC,MAAUb,EACVc,SAlCU,SAACX,GAAD,OAAOF,EAAeE,EAAEY,OAAOF,a,uBCPhDG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHlB,GAAIkB,EAAIlB,GACRmB,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAVvB,kBAcbM,GAda,4CAAH,sDCAPM,EAAc,SAAC,GAAuB,EAArBtB,GAAsB,IAAlBmB,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACrC,OAEI,yBAAKX,UAAU,oDACX,yBAAKwB,IAAMb,EAAMX,UAAU,eAAeyB,IAAOL,MCFhDM,EAAU,SAAC,GAAoB,IAAjBjB,EAAgB,EAAhBA,SAAgB,ECCf,SAAEA,GAAe,IAAD,EAEdlB,mBAAS,CAE/ByB,KAAM,GACNW,SAAS,IAL2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAfAC,qBAAW,WAEPtB,EAASC,GACJsB,MAAM,SAAAC,GAECH,EAAS,CACLb,KAAMgB,EACNL,SAAS,SAK1B,CAAElB,IAGEmB,EDtB2BK,CAAcxB,GAAlCY,EAHyB,EAG/BL,KAAcW,EAHiB,EAGjBA,QAMtB,OACI,yBAAK3B,UAAW,kBAEZ,wBAAIA,UAAW,yDAAf,IAA0ES,EAA1E,KAEEkB,GAAW,uBAAG3B,UAAU,sDAAb,cAEb,yBAAKA,UAAY,OAGRqB,EAAOH,KAAK,SAAAC,GAAG,OACZ,kBAAC,EAAD,eACIe,IAAMf,EAAIlB,IACNkB,UErB1BgB,EAAe,WAAS,IAAD,EAEW5C,mBAAS,CAAC,WAFrB,mBAElB6C,EAFkB,KAEN9C,EAFM,KAMzB,OAEI,oCACI,4BAAQU,UAAY,aAChB,yBAAKA,UAAY,OACb,yBAAKA,UAAY,yBACb,wBAAIA,UAAY,aAAhB,gBACA,kBAAC,EAAD,CAAaV,cAAkBA,MAI/B8C,EAAWlB,KACP,SAAAT,GAAQ,OACR,kBAAC,EAAD,CACIyB,IAAOzB,EACPA,SAAYA,UCrB5C4B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.520cde2a.chunk.js","sourcesContent":["\r\nimport PropTypes from 'prop-types';\r\nimport React, { useState } from 'react'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => setInputValue( e.target.value ); // \"e\" de evento, o elemento\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault(); // Esto es para prevenir que haga un refresh de la pagina\r\n\r\n\r\n        if( inputValue.trim().length>2 ){\r\n\r\n            setCategories( (categories) => [ inputValue, ...categories] );\r\n            setInputValue('');\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <form onSubmit = { handleSubmit }>\r\n            <div className=\"input-group mb-3 mt-3\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span \r\n                        className=\"input-group-text\" \r\n                        id=\"basic-addon1\">\r\n                            Busca aqu√≠\r\n                    </span>\r\n                </div>\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    aria-label=\"Naruto\" \r\n                    aria-describedby=\"basic-addon1\"\r\n                    value = { inputValue }\r\n                    onChange = { handleInputChange }\r\n                />\r\n            </div>\r\n        </form>\r\n        \r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=12&api_key=p80wSkw9gM486yaTMSJJc36Nr8wRX8A6`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    } )\r\n\r\n   return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GridGifItem = ( {id, title, url} ) => {\r\n    return (\r\n        \r\n        <div className=\"col-3 mb-2 animate__animated animate__zoomInDown\">\r\n            <img src={ url } className=\"card-img-top\" alt= { title } />\r\n        </div>  \r\n    )\r\n}\r\n","import React /*{useState, useEffect}*/ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GridGifItem } from './GridGifItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    // const [images, setImages] = useState([])//El arreglo, que se llama \"images\" viene vacio por defecto\r\n\r\n    \r\n\r\n    return (\r\n        <div className= 'container mb-5'>\r\n\r\n            <h1 className= 'col-12 bg-primary text-center text-light rounded mb-3'> { category } </h1>\r\n\r\n            { loading && <p className='animate__animated animate__flash animate__infinite'>Loading...</p> /*Este es un operador ternario, donde evaluo si loading es true, muestre un parrafo, sino, no haga nada*/ } \r\n\r\n            <div className = 'row'>\r\n\r\n                {\r\n                     images.map( img => (\r\n                        <GridGifItem \r\n                            key= {img.id}\r\n                            {...img} //aqui mando las propiedades del img de forma independiente, solo hace falta desestructurar en el otro componente \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        \r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    \r\n    useEffect( () => { // Este hook esta hecho para ejecutar un codigo una sola vez. En este caso, el getGifs para no hacer las peticiones http cada vez que se ejecute el useState\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n            } );\r\n\r\n    }, [ category ] ) //si se le manda un arreglo vacio de dependencias, quiere decir que getGifs solo se ejecutrara una vez. Pero pra evitar que se ejecute la peticion http de nuevo en cualquier otro dispositivo, se manda la category\r\n\r\n\r\n    return state; // {data: [], loading: true};\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n// import PropTypes from 'prop-types';\r\n\r\nconst GifExpertApp = (  ) => {\r\n\r\n    const [Categories, setCategories] = useState(['Naruto']);\r\n\r\n    // const handeAdd = () => setCategories( [...Categories, 'Naturo'] ); // aqui se usa el operador spread (...) para agarrar el arreglo anterior y sumarle un nuevo elemento\r\n\r\n    return(\r\n\r\n        <>\r\n            <header className = 'container'>\r\n                <div className = 'row'>\r\n                    <div className = 'jumbotron col-xl mt-5'>\r\n                        <h1 className = 'display-4'>GifExpertApp</h1>\r\n                        <AddCategory setCategories = { setCategories } />\r\n                    </div>\r\n                </div>\r\n                    {   //No se pueden usar for o esas cosas, solo metodos para devolver algo. map() recorre la posicion del vectore que se seleccione\r\n                        Categories.map( \r\n                            category => \r\n                            <GifGrid \r\n                                key= { category }\r\n                                category= { category } \r\n                            /> \r\n                             )\r\n                    }\r\n            </header>\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport{\r\n    GifExpertApp\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}